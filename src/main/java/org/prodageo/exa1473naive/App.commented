package org.prodageo.exa1473naive;

   /*
      This program lets the user counts the frequency of each word listed 
      in an array of String.
      All the words are read from the input file.  Words are
      converted to lower case.  The program makes a list of all the words
      that occur in the file, along with the number of times that each
      word occurs.  The words and word frequencies are printed to console
   */
   
  class WordData {
        // A little class to hold the data for one word.
     String word;   // The word (in lower case letters).
     int count;     // The number of times the word has been found.
     WordData(String w) {
          // Constructor creates an object with the specified word
          // and with the counter initialized to 1. 
        word = w;
        count = 1;
     }
  }
  
  public class App {
  
     static WordData[] words;  // An array to hold the words from the file.
                               //   Note that the array will be expanded as 
                               //   necessary, in the insertWord() subroutine.
     
     static int wordCount;   // The number of words currently stored in
                             //   the array.
  
  
     public static void main(String[] args) {
     
        words = new WordData[10];  // Start with space for 10 words.
        wordCount = 0;             // Currently, there are no words in the array.
        
        // array of words
        String[] in = { "Bus", "Car", "Train", "Train", "Plane" , "Car", "Bus", "Bus", "Plane"} ;
        
        for ( String a : in )
        {
            insertWord(a);
        }
                
        /* Output the words in alphabetical order. */
        System.out.println("Words in alphabetical order, with the number of occurrences:");
        System.out.println("-----------------------------------------------------------");
        System.out.println();
        
        displayWordList();

    } // end main()
     
  
     static void insertWord(String w) {
             // Insert the word w into the array of words, unless it already
             // appears there.  If the word already appears in the list,
             // add 1 to the counter for that word.  The words in the array are in
             // lower case,  and w is converted to lower case before it is processed.
             // Note that the words in the array are kept in alphabetical order.
             // If the array has no more space to hold w, then it is doubled
             // in size.
  
        int pos = 0;  // This will be the position in the array where w belongs.
  
        w = w.toLowerCase();
        
        /* Find the position in the array where w belongs, after all the
           words that precede w alphabetically.  If a copy of w already
           occupies that position, then it is not necessary to insert
           w, so just add 1 to the counter associated with the word
           and return. */
  
        while (pos < wordCount && words[pos].word.compareTo(w) < 0)
           pos++;
        if (pos < wordCount && words[pos].word.equals(w)) {
           words[pos].count++;
           return;
        }
           
        /* If the array is full, make a new array that is twice as 
            big, copy all the words from the old array to the new,
            and set the variable, words, to refer to the new array. */
  
        if (wordCount == words.length) {
           WordData[] newWords = new WordData[words.length*2];
           System.arraycopy(words,0,newWords,0,wordCount);
           words = newWords;
        }
        
        /* Put w into its correct position in the array.  Move any
           words that come after w up one space in the array to
           make room for w.  Create a new WordData object to hold
           the new word.  */
  
        for (int i = wordCount; i > pos; i--)
           words[i] = words[i-1];
        words[pos] = new WordData(w);
        wordCount++;
  
     }  // end insertWord()
     
     
     static void displayWordList() {
            // Write the list of words from the words array, along with their
            // associated frequencies. If an individual word is longer than
            // 15 spaces, the output won't be quite so neat.
         for (int i = 0; i < wordCount; i++) {
            System.out.print("   ");
            System.out.print(words[i].word);
            for (int space = words[i].word.length(); space < 15; space++)
            System.out.print(" ");
            System.out.print(" ");
            System.out.println(words[i].count);
         }
     }  // end putWordList()
  }  // end class WordFrequencies